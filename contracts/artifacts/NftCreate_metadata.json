{
	"compiler": {
		"version": "0.8.4+commit.c7e474f2"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "owneraddress",
						"type": "address"
					}
				],
				"name": "eventaddress",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "nftname",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owneraddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "blocknumber",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "blocktimestamp",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "ipfsurl",
						"type": "string"
					}
				],
				"name": "eventdetails",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "eventlength",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_approved",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getDetails",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getLength",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "_interfaceID",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "_symbol",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"approve(address,uint256)": {
					"details": "Set or reaffirm the approved address for an NFT. This function can be changed to payable.",
					"params": {
						"_approved": "Address to be approved for the given NFT ID.",
						"_tokenId": "ID of the token to be approved."
					}
				},
				"balanceOf(address)": {
					"details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
					"params": {
						"_owner": "Address for whom to query the balance."
					},
					"returns": {
						"_0": "Balance of _owner."
					}
				},
				"getApproved(uint256)": {
					"details": "Get the approved address for a single NFT.",
					"params": {
						"_tokenId": "ID of the NFT to query the approval of."
					},
					"returns": {
						"_0": "Address that _tokenId is approved for."
					}
				},
				"isApprovedForAll(address,address)": {
					"details": "Checks if `_operator` is an approved operator for `_owner`.",
					"params": {
						"_operator": "The address that acts on behalf of the owner.",
						"_owner": "The address that owns the NFTs."
					},
					"returns": {
						"_0": "True if approved for all, false otherwise."
					}
				},
				"name()": {
					"details": "Returns a descriptive name for a collection of NFTokens.",
					"returns": {
						"_name": "Representing name."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"ownerOf(uint256)": {
					"details": "Returns the address of the owner of the NFT. NFTs assigned to the zero address are considered invalid, and queries about them do throw.",
					"params": {
						"_tokenId": "The identifier for an NFT."
					},
					"returns": {
						"_owner": "Address of _tokenId owner."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
					"params": {
						"_from": "The current owner of the NFT.",
						"_to": "The new owner.",
						"_tokenId": "The NFT to transfer."
					}
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
					"params": {
						"_data": "Additional data with no specified format, sent in call to `_to`.",
						"_from": "The current owner of the NFT.",
						"_to": "The new owner.",
						"_tokenId": "The NFT to transfer."
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.",
					"params": {
						"_approved": "True if the operators is approved, false to revoke approval.",
						"_operator": "Address to add to the set of authorized operators."
					}
				},
				"supportsInterface(bytes4)": {
					"details": "Function to check which interfaces are suported by this contract.",
					"params": {
						"_interfaceID": "Id of the interface."
					},
					"returns": {
						"_0": "True if _interfaceID is supported, false otherwise."
					}
				},
				"symbol()": {
					"details": "Returns an abbreviated name for NFTokens.",
					"returns": {
						"_symbol": "Representing symbol."
					}
				},
				"tokenURI(uint256)": {
					"details": "A distinct URI (RFC 3986) for a given NFT.",
					"params": {
						"_tokenId": "Id for which we want uri."
					},
					"returns": {
						"_0": "URI of _tokenId."
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.",
					"params": {
						"_from": "The current owner of the NFT.",
						"_to": "The new owner.",
						"_tokenId": "The NFT to transfer."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approve(address,uint256)": {
					"notice": "The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner."
				},
				"getApproved(uint256)": {
					"notice": "Throws if `_tokenId` is not a valid NFT."
				},
				"safeTransferFrom(address,address,uint256)": {
					"notice": "This works identically to the other function with an extra data parameter, except this function just sets data to \"\""
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"notice": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`."
				},
				"setApprovalForAll(address,bool)": {
					"notice": "This works even if sender doesn't own any tokens at the time."
				},
				"transferFrom(address,address,uint256)": {
					"notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they may be permanently lost."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/NftCreate.sol": "NftCreate"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/NftCreate.sol": {
			"keccak256": "0xb640f2d6f3415d9560b6b5cefe3a7d7a20d694cb9c15bb54e6d8940543d049c9",
			"license": "MIT",
			"urls": [
				"bzz-raw://84ec10f300081c86a3678e27c26222005cd967cc7995f88b93bc626f5ef03720",
				"dweb:/ipfs/QmXras634NkFENDXacLsnSi4mQj6Xsyhio78djqvy2wsi3"
			]
		},
		"contracts/context.sol": {
			"keccak256": "0xeb99a0ef5852d3af5fd1abf31dc5b765580ebb2c2d1bcda726d3fb8b1000f169",
			"license": "MIT",
			"urls": [
				"bzz-raw://064f581040faaa900700e2106ca1af1cd80e6a266cc391a06b028b36a25805a7",
				"dweb:/ipfs/QmTeMPmha5MXc24PnwV4xArQ31np7oz1yfbDkSCw7mxjA4"
			]
		},
		"contracts/ownable.sol": {
			"keccak256": "0xed4e5b90e90781724299d671516cd450c02fd55c8944a8d7b7ff0f1948dd1951",
			"license": "MIT",
			"urls": [
				"bzz-raw://d98a3a7bba1ade187bcdbb86ad96327b33069dba2e25eaf4ae5de4f09e959a9d",
				"dweb:/ipfs/QmYBe9sRocYHkcVP3wvnnJhD9ejetwmr9YLxiuc4Hmut2B"
			]
		},
		"contracts/tokens/erc721-metadata.sol": {
			"keccak256": "0xbf316cfbd8b02ec69dbf6a78d1fa1300ec7944d73f51066d2a2b35897467dd8f",
			"license": "MIT",
			"urls": [
				"bzz-raw://ab1e49bc4aac873ed54ef5bde342d15d6faa9b776685e67f626a42998f3c32e7",
				"dweb:/ipfs/QmdLqqC3YLsNorMUGZBAnEe2vgvaj2yJzBedDU1QA4YrSR"
			]
		},
		"contracts/tokens/erc721-token-receiver.sol": {
			"keccak256": "0xeaf0ca76a4dc3746bf427d1cf21181ec951fae74e6514a751c2b8e06e40508d2",
			"license": "MIT",
			"urls": [
				"bzz-raw://427765798598157ff17d4294334b9c41dadb9b2652a64329ca3d940d44b99ef5",
				"dweb:/ipfs/QmedBFE5VGmF89XJGRhTkJLF1tdzEH2dTbZchKZYTkR1rC"
			]
		},
		"contracts/tokens/erc721.sol": {
			"keccak256": "0xe8a7d7d90e8c2a447c6d01e7b8178a7b4d2fb4f4354872e3dafde9de65db0173",
			"license": "MIT",
			"urls": [
				"bzz-raw://2b06a1eb8b18d9996d2261184d9a9b9588abd51e96a95e8bf6280251190a3a1a",
				"dweb:/ipfs/QmW6gFv5v81jmfe7QcThaCUEqegznTiEMENnjfZgNDKaNH"
			]
		},
		"contracts/tokens/nf-token-metadata.sol": {
			"keccak256": "0x579267ebc358e1ca84a68c3296d84f33ac5d193bb835db053eb51f3c0270ae46",
			"license": "MIT",
			"urls": [
				"bzz-raw://16222b236c5a6f8fd15f874e3fad58811559684d5fc22f92243403404fcf8067",
				"dweb:/ipfs/QmZB1773agfBtvbeeZD2aNSLhFuLWQybMK8F3RxoDgCuur"
			]
		},
		"contracts/tokens/nf-token.sol": {
			"keccak256": "0x08968a831aba9ff00e0b3d2028d0f0a7a5c019742a77c875f065de05fa02f90a",
			"license": "MIT",
			"urls": [
				"bzz-raw://028a4c90b311121f646d3e20babafa7461a5a09831e1afca5199805a11b6ebd2",
				"dweb:/ipfs/QmPCFz5GptBwL1j1AiAWNJKB9ND1r5tijr8Jxpnue6rT9F"
			]
		},
		"contracts/tokens/utils/address-utils.sol": {
			"keccak256": "0x8e0fb750db34358198bd15802ed9e10c78318386b13a98d0fa0ef8dd0e53d897",
			"license": "MIT",
			"urls": [
				"bzz-raw://87e6c3b0c2b6efba1671c841677eea094ef1068a9bd21080d8a9268c425f941d",
				"dweb:/ipfs/Qmb1kTWTQt1KxNrqEncLKnrnwLSZ4tJYTEtAat1ZYYjqeW"
			]
		},
		"contracts/tokens/utils/erc165.sol": {
			"keccak256": "0xcf046151273ad518256893fd90eb59aee16fc771de52fcebc3e991994375642f",
			"license": "MIT",
			"urls": [
				"bzz-raw://5f19a4eb74966b5d790173c67ef62259c6fd78f7e9b1c33f0491a3e5e458ff98",
				"dweb:/ipfs/QmbaBwKcAjJWpqh4j9BaWadHpDGShNAu7qmPawpjftu2ZC"
			]
		},
		"contracts/tokens/utils/supports-interface.sol": {
			"keccak256": "0x8c2748b9ca17e0b7ef71e664be817681379680e665ad1d8c239723dbabd0848c",
			"license": "MIT",
			"urls": [
				"bzz-raw://010abd974be5d91409631c519406b942eb7d31944e36c1062c96b58f9cb74c9c",
				"dweb:/ipfs/QmWbESJYoUzPjU5xhqymUnBx4TbXBvp99MqpfEZsppxhbd"
			]
		}
	},
	"version": 1
}